<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Qt+MySql+Socket实现本地通讯</title>
      <link href="/2024/10/13/ji-yu-qt-mysql-socket-shi-xian-ben-di-ju-yu-wang-tong-xun/"/>
      <url>/2024/10/13/ji-yu-qt-mysql-socket-shi-xian-ben-di-ju-yu-wang-tong-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h1><p>​这个项目的初衷是用来学习Socket网络通讯，并练习基础的MySql语句，但因时间有限，只实现了基本通讯功能，主要分为注册账号，增添好友，和本地通讯三个功能。</p><p>​因作者实力有限，所以代码中可能会遇到一些bug，如果读者遇到不懂的地方可以通过博客里面的联系方式找我讨论或者在评论区提问，还因为作者的英语水平有限，所以代码中有些变量的命名存在拼写错误，比如账号account,但我通篇都是acount，后期发现了也没有精力去修改了，类似其他的问题都可以在评论区提出。本代码完全由本人和chatgpt合力完成，未有抄袭，任何人都可以直接拿来参考共同学习。</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>项目是用C++写的，需要有Qt基础和MySql基础，该项目的目的在于简单了解TCP/IP协议内容，简单实现Socket通讯，和一些数据库语句的基本用法，里面还有很多bug，最终比较遗憾的是只实现了本地多人通讯，做的时候没有往局域网通讯的方向去想，导致做完之后发现客户端的权限太大了，只能实现本地通讯。由于后续又有其他的任务，就没有精力去完善了，所以该项目就算是给大家举了一个反面教材，希望大家之后在做客户端的时候注意只用写请求就行，不要和数据库等内容相关联。觉得做的比较满意的部分是用服务器实现了多人通讯，也就是一个人可以通过指定好友向服务器发送请求，然后服务器会处理请求，并做出回应，将信息传递给接收者。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="C:/Users/30566/AppData/Roaming/Typora/typora-user-images/image-20241016234807980.png" alt="image-20241016234807980"></p><p><img src="C:/Users/30566/AppData/Roaming/Typora/typora-user-images/image-20241016234823553.png" alt="image-20241016234823553"></p><p><img src="C:/Users/30566/AppData/Roaming/Typora/typora-user-images/image-20241016234733080.png" alt="image-20241016234733080"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p><img src="https://files.oaiusercontent.com/file-vtBikKdZynBi7Puka6TAp2cK?se=2024-10-13T03:48:16Z&amp;sp=r&amp;sv=2024-08-04&amp;sr=b&amp;rscc=max-age=299,%20immutable,%20private&amp;rscd=attachment;%20filename=image.png&amp;sig=F0Hm13BPOK5m/4WdZB93GL0e5C6XOYJ+BzPwcIGSltE=" alt="已上传的图片"></p><h3 id="各个文件的作用"><a href="#各个文件的作用" class="headerlink" title="各个文件的作用"></a>各个文件的作用</h3><h4 id="Headers（头文件）"><a href="#Headers（头文件）" class="headerlink" title="Headers（头文件）"></a>Headers（头文件）</h4><ul><li><strong>addfrienddialog.h</strong>：<ul><li>这个头文件声明了 <code>AddFriendDialog</code> 类，通常用于管理“添加好友”的对话框。</li><li>可能包括用于输入好友账号、添加好友的按钮，以及处理输入和用户操作的接口声明。</li></ul></li><li><strong>chatpage.h</strong>：<ul><li>这个头文件声明了 <code>ChatPage</code> 类，通常用于表示一个聊天窗口，包含了聊天内容的展示、发送消息等功能。</li><li>包括聊天界面的基本操作，比如发送和接收消息的功能。</li></ul></li><li><strong>dialoglist.h</strong>：<ul><li>这个头文件声明了 <code>DialogList</code> 类，通常用于管理当前用户的好友列表和会话窗口。</li><li>包括显示好友列表的界面和管理与多个好友聊天的功能，允许用户选择好友并打开聊天窗口。</li></ul></li><li><strong>signup.h</strong>：<ul><li>这个头文件声明了 <code>Signup</code> 类，用于管理注册用户的界面。</li><li>包含用户注册的相关接口，比如输入用户名、密码以及确认注册的逻辑。</li></ul></li><li><strong>widget.h</strong>：<ul><li>这个头文件声明了主窗口（<code>Widget</code> 类），通常是应用程序启动后的主界面。</li><li>包括登录界面、注册按钮等初始操作的逻辑。</li></ul></li></ul><h4 id="Sources（源文件）"><a href="#Sources（源文件）" class="headerlink" title="Sources（源文件）"></a>Sources（源文件）</h4><ul><li><strong>addfrienddialog.cpp</strong>：<ul><li>这个源文件是 <code>addfrienddialog.h</code> 的实现部分，具体实现了添加好友对话框的功能。</li><li>例如：处理用户输入好友账号后的确认、取消等按钮的逻辑，以及与好友系统的交互。</li></ul></li><li><strong>chatpage.cpp</strong>：<ul><li>这个源文件实现了 <code>chatpage.h</code> 中的声明，提供了聊天窗口的具体功能。</li><li>包括发送消息、显示接收到的消息等实现，处理聊天界面的 UI 和消息逻辑。</li></ul></li><li><strong>dialoglist.cpp</strong>：<ul><li>这个源文件实现了 <code>dialoglist.h</code> 中的功能，主要用于管理好友列表和多对话窗口。</li><li>包括加载好友列表、打开聊天窗口、响应服务器的消息、添加好友的逻辑等。</li></ul></li><li><strong>main.cpp</strong>：<ul><li>这个文件是程序的入口，通常包含 <code>main()</code> 函数。</li><li>在这里会初始化应用程序，显示主窗口，并开始应用程序的事件循环。</li></ul></li><li><strong>signup.cpp</strong>：<ul><li>这个源文件是 <code>signup.h</code> 的实现部分，具体实现了注册窗口的功能。</li><li>包括检查用户输入是否有效、注册到数据库等具体的逻辑。</li></ul></li><li><strong>widget.cpp</strong>：<ul><li>这个文件是 <code>widget.h</code> 的实现部分，用于实现主窗口的功能。</li><li>包括初始化登录界面、用户输入处理以及登录、注册按钮的响应逻辑。</li></ul></li></ul><h4 id="Forms（UI-界面文件）"><a href="#Forms（UI-界面文件）" class="headerlink" title="Forms（UI 界面文件）"></a>Forms（UI 界面文件）</h4><ul><li><strong>addfrienddialog.ui</strong>：<ul><li>这个 <code>.ui</code> 文件定义了添加好友对话框的用户界面。</li><li>包含输入好友账号的文本框、确认和取消的按钮等界面元素。</li></ul></li><li><strong>chatpage.ui</strong>：<ul><li>这个 <code>.ui</code> 文件定义了聊天窗口的用户界面。</li><li>包含显示聊天记录的区域、输入消息的文本框、发送按钮等元素。</li></ul></li><li><strong>dialoglist.ui</strong>：<ul><li>这个 <code>.ui</code> 文件定义了好友列表的用户界面。</li><li>包含显示当前用户所有好友的列表、选择好友进行聊天的按钮等界面元素。</li></ul></li><li><strong>signup.ui</strong>：<ul><li>这个 <code>.ui</code> 文件定义了用户注册界面。</li><li>包含用户名、密码输入框，以及确认注册的按钮。</li></ul></li><li><strong>widget.ui</strong>：<ul><li>这个 <code>.ui</code> 文件定义了应用程序的主界面。</li><li>通常用于登录界面，包含账号、密码输入框、登录按钮、注册按钮等。</li></ul></li></ul><h3 id="项目的整体功能描述"><a href="#项目的整体功能描述" class="headerlink" title="项目的整体功能描述"></a>项目的整体功能描述</h3><ul><li><strong>Widget（主界面）</strong>：是程序的入口，包括登录和注册功能。</li><li><strong>Signup（注册界面）</strong>：用于新用户的注册功能。</li><li><strong>DialogList（好友列表界面）</strong>：在用户登录成功后，显示用户的好友列表，并允许用户与好友进行聊天。</li><li><strong>ChatPage（聊天界面）</strong>：用户可以与好友发送和接收消息。</li><li><strong>AddFriendDialog（添加好友对话框）</strong>：用于添加新好友的功能，输入好友的账号后请求添加。</li></ul><h3 id="项目工作流程"><a href="#项目工作流程" class="headerlink" title="项目工作流程"></a>项目工作流程</h3><p><strong>用户启动程序</strong>，首先看到的是登录界面（由 <code>widget</code> 类实现）。</p><ul><li>用户可以选择登录或注册。</li><li>如果用户选择注册，则会转到 <code>Signup</code> 界面。</li></ul><p><strong>登录成功后</strong>，进入到 <code>DialogList</code> 界面，可以看到当前好友列表。</p><ul><li>可以选择某个好友，点击后打开对应的聊天窗口（<code>ChatPage</code>）。</li><li>也可以通过“添加好友”按钮，打开 <code>AddFriendDialog</code> 对话框，添加新好友。</li></ul><p><strong>聊天窗口</strong>允许用户发送和接收消息，整个系统通过 <code>QTcpSocket</code> 与服务器通信来完成消息的收发。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p><img src="C:/Users/30566/AppData/Roaming/Typora/typora-user-images/image-20241013115547963.png" alt="image-20241013115547963"></p><h3 id="各个文件的作用-1"><a href="#各个文件的作用-1" class="headerlink" title="各个文件的作用"></a>各个文件的作用</h3><h4 id="Headers（头文件）-1"><a href="#Headers（头文件）-1" class="headerlink" title="Headers（头文件）"></a>Headers（头文件）</h4><ul><li><strong>chatserver.h：</strong><ul><li>这个头文件声明了 <code>ChatServer</code> 类，它是服务器的核心部分，用于管理客户端连接、消息处理等。</li><li>包含与客户端的连接管理、消息转发、登录验证等功能的声明。</li></ul></li><li><strong>widget.h：</strong><ul><li>这个头文件声明了 <code>Widget</code> 类，通常用于表示服务器的主窗口。</li><li>主要是服务器界面的基本操作，例如启动、停止服务器，查看连接状态等。</li></ul></li></ul><h4 id="Sources（源文件）-1"><a href="#Sources（源文件）-1" class="headerlink" title="Sources（源文件）"></a>Sources（源文件）</h4><ul><li><strong>chatserver.cpp</strong>：<ul><li>这个文件实现了 <code>chatserver.h</code> 中声明的 <code>ChatServer</code> 类。</li><li>包含了服务器启动、监听端口、接收客户端连接、处理客户端消息、消息转发等功能的具体实现。</li><li>例如，服务器可能通过 <code>QTcpServer</code> 和 <code>QTcpSocket</code> 来管理多个客户端连接。</li></ul></li><li><strong>main.cpp</strong>：<ul><li>这个文件是程序的入口，通常包含 <code>main()</code> 函数。</li><li><code>main()</code> 函数负责初始化应用程序、创建服务器主窗口，并启动服务器的事件循环。</li></ul></li><li><strong>widget.cpp</strong>：<ul><li>这个文件实现了 <code>widget.h</code> 中的 <code>Widget</code> 类。</li><li>主要实现服务器主窗口的功能，比如用户界面的交互（例如启动或停止服务器按钮）、显示当前连接状态、日志信息等。</li></ul></li></ul><h4 id="Forms（UI-界面文件）-1"><a href="#Forms（UI-界面文件）-1" class="headerlink" title="Forms（UI 界面文件）"></a>Forms（UI 界面文件）</h4><ul><li><strong>widget.ui：</strong><ul><li>这个 <code>.ui</code> 文件定义了服务器主界面的用户界面。</li><li>通常包括服务器控制的相关元素，例如启动和停止按钮、端口输入框，以及用于显示当前客户端连接状态的文本框或列表。</li></ul></li></ul><h3 id="项目的整体功能描述-1"><a href="#项目的整体功能描述-1" class="headerlink" title="项目的整体功能描述"></a>项目的整体功能描述</h3><ul><li><strong>服务器端程序</strong>：该项目是一个聊天应用的服务器端，负责处理客户端的连接、管理多个客户端之间的通信。</li><li><strong>主要功能：</strong><ul><li><strong>接受客户端的连接</strong>：通过监听指定端口，接受多个客户端的连接请求。</li><li><strong>处理登录和消息传递</strong>：在客户端登录时进行验证，并在客户端之间进行消息转发。</li><li><strong>提供主窗口界面</strong>：通过 GUI，提供服务器管理人员控制和查看服务器状态的接口。（本项目只有调试信息）</li></ul></li></ul><h3 id="文件具体职责描述"><a href="#文件具体职责描述" class="headerlink" title="文件具体职责描述"></a>文件具体职责描述</h3><ol><li><p><strong>chatserver.h 和 chatserver.cpp</strong>：</p><ul><li><p><strong><code>chatserver.h</code></strong> 中声明了服务器的所有必要接口，包括启动和停止服务器的方法，管理客户端连接的方法，和消息处理函数。</p></li><li><p><code>chatserver.cpp</code></p><p> 实现了这些功能，可能通过 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTcpServer</span><br></pre></td></tr></tbody></table></figure><p> 来监听端口，并通过 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTcpSocket</span><br></pre></td></tr></tbody></table></figure><p> 来管理每个连接的客户端。具体实现功能包括：</p><ul><li><strong>服务器启动</strong>：监听一个指定的端口，等待客户端连接。</li><li><strong>管理客户端连接</strong>：接受新连接，维护一个套接字列表，跟踪所有已连接的客户端。</li><li><strong>消息处理和转发</strong>：处理从某个客户端接收到的消息，并根据目标账号将消息转发给对应的客户端。</li></ul></li></ul></li><li><p><strong>widget.h 和 widget.cpp</strong>：</p><ul><li><strong><code>widget.h</code></strong> 和 <strong><code>widget.cpp</code></strong> 文件定义了服务器的主窗口，这个窗口用于服务器的 GUI 交互。</li><li>界面功能可能包括：<ul><li><strong>启动和停止服务器按钮</strong>：用于服务器管理人员控制服务器。</li><li><strong>显示连接信息</strong>：例如查看当前连接的客户端数量、日志输出等。</li><li><strong>信息输出</strong>：显示一些服务器的状态信息，例如某个客户端连接或断开连接的日志。</li></ul></li></ul></li><li><p><strong>widget.ui</strong>：</p><ul><li><strong><code>widget.ui</code></strong> 是服务器主窗口的 UI 文件，定义了界面布局，包括按钮、状态显示框等。</li><li>主要用于通过可视化方式管理服务器操作，比如监听端口的输入、查看连接信息、控制服务器启动/停止等。</li></ul></li></ol><h3 id="项目工作流程-1"><a href="#项目工作流程-1" class="headerlink" title="项目工作流程"></a>项目工作流程</h3><ol><li><strong>启动服务器</strong>：<ul><li>通过 <code>widget</code> 界面，服务器管理员可以选择启动服务器。</li><li>服务器会开始监听指定的端口，等待客户端连接。</li></ul></li><li><strong>客户端连接</strong>：<ul><li>当客户端尝试连接时，服务器通过 <code>chatserver</code> 类处理连接请求，并接受该连接。</li><li>服务器通过 <code>QTcpSocket</code> 来维护每个连接的客户端。</li></ul></li><li><strong>消息管理</strong>：<ul><li>客户端登录成功后，服务器接收来自客户端的消息，并根据消息目标账号查找对应的客户端进行转发。</li><li>服务器负责确保客户端之间的消息能够正确且高效地传递。</li></ul></li><li><strong>管理界面</strong>：<ul><li>通过 <code>widget</code> 界面，管理员可以查看所有已连接的客户端，查看每个客户端的 IP 地址和端口等信息。</li><li>管理员还可以通过 GUI 停止服务器或重启服务器。</li></ul></li></ol><h3 id="服务器的作用总结"><a href="#服务器的作用总结" class="headerlink" title="服务器的作用总结"></a>服务器的作用总结</h3><ul><li><strong>作为中央通信枢纽</strong>：QQ 项目客户端之间不能直接通信，因此需要一个服务器来接收和转发消息。</li><li><strong>管理用户登录和认证</strong>：服务器验证用户的登录信息，确保只有注册的用户可以访问服务。</li><li><strong>处理多个客户端连接</strong>：服务器可以同时处理多个客户端的连接，并根据需要将消息正确地路由到目标客户端。</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="C:/Users/30566/AppData/Roaming/Typora/typora-user-images/image-20241013121039178.png" alt="image-20241013121039178"></p><h3 id="friends表"><a href="#friends表" class="headerlink" title="friends表"></a>friends表</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- auto-generated definition</span><br><span class="line">create table friends</span><br><span class="line">(</span><br><span class="line">    id         int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    user_id    int                                     not null,</span><br><span class="line">    friend_id  int                                     not null,</span><br><span class="line">    status     enum ('pending', 'accepted', 'blocked') not null,</span><br><span class="line">    created_at datetime default CURRENT_TIMESTAMP      null,</span><br><span class="line">    updated_at datetime default CURRENT_TIMESTAMP      null on update CURRENT_TIMESTAMP,</span><br><span class="line">    constraint user_id</span><br><span class="line">        unique (user_id, friend_id),</span><br><span class="line">    constraint friends_ibfk_1</span><br><span class="line">        foreign key (user_id) references users (id)</span><br><span class="line">            on delete cascade,</span><br><span class="line">    constraint friends_ibfk_2</span><br><span class="line">        foreign key (friend_id) references users (id)</span><br><span class="line">            on delete cascade</span><br><span class="line">)</span><br><span class="line">    engine = InnoDB;</span><br><span class="line"></span><br><span class="line">create index friend_id</span><br><span class="line">    on friends (friend_id);</span><br></pre></td></tr></tbody></table></figure><h3 id="messages表（未用到）"><a href="#messages表（未用到）" class="headerlink" title="messages表（未用到）"></a>messages表（未用到）</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- auto-generated definition</span><br><span class="line">create table messages</span><br><span class="line">(</span><br><span class="line">    id          int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    sender_id   int                                not null,</span><br><span class="line">    receiver_id int                                not null,</span><br><span class="line">    content     text                               not null,</span><br><span class="line">    timestamp   datetime default CURRENT_TIMESTAMP null,</span><br><span class="line">    constraint messages_ibfk_1</span><br><span class="line">        foreign key (sender_id) references users (id),</span><br><span class="line">    constraint messages_ibfk_2</span><br><span class="line">        foreign key (receiver_id) references users (id)</span><br><span class="line">)</span><br><span class="line">    engine = InnoDB;</span><br><span class="line"></span><br><span class="line">create index receiver_id</span><br><span class="line">    on messages (receiver_id);</span><br><span class="line"></span><br><span class="line">create index sender_id</span><br><span class="line">    on messages (sender_id);</span><br></pre></td></tr></tbody></table></figure><h3 id="users表"><a href="#users表" class="headerlink" title="users表"></a>users表</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- auto-generated definition</span><br><span class="line">create table users</span><br><span class="line">(</span><br><span class="line">    id       int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    username varchar(255) not null,</span><br><span class="line">    password varchar(255) not null,</span><br><span class="line">    acount   varchar(255) null,</span><br><span class="line">    constraint username</span><br><span class="line">        unique (username)</span><br><span class="line">)</span><br><span class="line">    engine = InnoDB;</span><br></pre></td></tr></tbody></table></figure><p>数据库没什么好说的，先听基础数据库教程，很容易就能理解。</p><h2 id="实现教程"><a href="#实现教程" class="headerlink" title="实现教程"></a>实现教程</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>先在Qt安装MySql驱动，网上有很多教程。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"widget.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    QSqlDatabase db = QSqlDatabase::<span class="built_in">addDatabase</span>(<span class="string">"QMYSQL"</span>);</span><br><span class="line"></span><br><span class="line">    db.<span class="built_in">setHostName</span>(<span class="string">"localhost"</span>);<span class="comment">//改为自己的，默认localhost</span></span><br><span class="line">    db.<span class="built_in">setPort</span>(<span class="number">3306</span>);<span class="comment">//修改为自己的端口号，默认3306</span></span><br><span class="line">    db.<span class="built_in">setDatabaseName</span>(<span class="string">"qtconnectmysql"</span>);<span class="comment">//提前创建该项目数据库，并增添上述板块的三个表</span></span><br><span class="line">    db.<span class="built_in">setUserName</span>(<span class="string">"root"</span>);<span class="comment">//设为自己一开始设置的，默认root</span></span><br><span class="line">    db.<span class="built_in">setPassword</span>(<span class="string">"123456"</span>);<span class="comment">//设置注册数据库的密码，默认123456</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!db.<span class="built_in">open</span>()) {</span><br><span class="line">        <span class="built_in">qDebug</span>(<span class="string">"Sql connect failed."</span>);</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; db.<span class="built_in">lastError</span>().<span class="built_in">text</span>();</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="literal">nullptr</span>, <span class="string">"警告"</span>, <span class="string">"无法连接数据库"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">qDebug</span>(<span class="string">"Sql connected."</span>);</span><br><span class="line">    }</span><br><span class="line">    Widget w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意修改数据库配置</strong></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>先允许服务端，客户端可以复制成多份，分别同时运行，登入的账号即可实现通讯功能。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>百度网盘：</p><p>链接:<a href="https://pan.baidu.com/s/1n5ODY9eVyCv6VlUD5ycS0Q?pwd=yxme">https://pan.baidu.com/s/1n5ODY9eVyCv6VlUD5ycS0Q?pwd=yxme</a> 提取码:yxme </p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
          <category> MySql </category>
          
          <category> TcpSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> MySql </tag>
            
            <tag> TcpSocket </tag>
            
            <tag> 多用户即时通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5部署全流程</title>
      <link href="/2024/07/23/yolov5-bu-shu-liu-cheng/"/>
      <url>/2024/07/23/yolov5-bu-shu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>本教程是基于yolov在window11部署的入门教程，部分内容和源码摘自<a href="https://blog.csdn.net/weixin_73785971/article/details/139389534?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E4%BD%BF%E7%94%A8yolov5%E5%AE%9E%E7%8E%B0%E5%88%86%E8%BE%A8%E7%9F%AD%E8%A2%96%E5%92%8C%E9%95%BF%E8%A2%96&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-139389534.142">（实战）用yolov5实现图像识别_yolov5识别-CSDN博客</a></p><p>如有错误，请在评论区指出</p><h2 id="1-下载yolov5项目"><a href="#1-下载yolov5项目" class="headerlink" title="1.下载yolov5项目"></a>1.下载yolov5项目</h2><p>在GitHub上下载yolov5，链接在下面<br><a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a><br>下载完成后解压到合适位置即可</p><h2 id="2-安装Anoconda-Pycharm"><a href="#2-安装Anoconda-Pycharm" class="headerlink" title="2.安装Anoconda Pycharm"></a>2.安装Anoconda Pycharm</h2><p>Anocanda安装教程<br><a href="https://blog.csdn.net/fan18317517352/article/details/123035625">https://blog.csdn.net/fan18317517352/article/details/123035625</a><br>PyCharm安装教程<br><a href="https://blog.csdn.net/qq_44809707/article/details/122501118">https://blog.csdn.net/qq_44809707/article/details/122501118</a><br>按照教程安装即可，注意<strong>正确配置环境变量</strong></p><h2 id="3-安装CUDA，Cudnn，Pytorch-关键"><a href="#3-安装CUDA，Cudnn，Pytorch-关键" class="headerlink" title="3.安装CUDA，Cudnn，Pytorch(关键)"></a>3.安装CUDA，Cudnn，Pytorch(关键)</h2><p>如果默认安装项目自带的requirements.txt中的包的话，最后会<strong>以cpu跑项目，这将会导致训练模型的速度非常慢</strong>，原因是requirements.txt中的pytorch为cpu版本，解决办法如下：</p><p>先按照教程安装合适的cuda，Cudnn：</p><p><a href="https://blog.csdn.net/m0_45447650/article/details/123704930?ops_request_misc=%7B%22request_id%22:%22172173622416800175759760%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=172173622416800175759760&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123704930-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=cuda%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187">CUDA安装教程（超详细）-CSDN博客</a></p><p>接着安装cuda版本对应的pytorch，教程如下（<strong>切记切记！！！！！ 安装Gpu版本的</strong>）：</p><p><a href="https://blog.csdn.net/weixin_44752340/article/details/130542629?ops_request_misc=%7B%22request_id%22:%22172169655016800188568943%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=172169655016800188568943&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-130542629-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=pytorch&amp;spm=1018.2226.3001.4187">2023最新pytorch安装（超详细版）-CSDN博客</a></p><h2 id="4-用Anoconda创建虚拟环境"><a href="#4-用Anoconda创建虚拟环境" class="headerlink" title="4.用Anoconda创建虚拟环境"></a>4.用Anoconda创建虚拟环境</h2><p>先按win+r ，输入cmd</p><p>创建虚拟环境conda create -n yolov5</p><p>激活虚拟环境   conda activate yolov5</p><p><strong>注释掉 requirements.txt中的</strong></p><p>15行 torch&gt;=1.8.0  # see <a href="https://pytorch.org/get-started/locally">https://pytorch.org/get-started/locally</a> (recommended)<br>16行 torchvision&gt;=0.9.0</p><p>在行首加#即可</p><p>安装依赖库conda install -r requirements.txt</p><p>如果下载特别慢的话注意是否是因为没有<strong>更换国内镜像</strong></p><h2 id="5-用Pycharm打开项目并更改环境"><a href="#5-用Pycharm打开项目并更改环境" class="headerlink" title="5.用Pycharm打开项目并更改环境"></a>5.用Pycharm打开项目并更改环境</h2><p>打开pycharm</p><p>打开项目所在文件夹</p><p>更改环境为刚创建的yolov5环境</p><p>这一步教程如下：</p><p>第一次用先激活conda环境<a href="https://blog.csdn.net/Father_Of_Soft/article/details/132582043">激活Conda环境并在pycharm使用_pycharm激活conda环境-CSDN博客</a></p><p>再选择 <a href="https://blog.csdn.net/Aer_7z/article/details/131801694?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Ctr-2-131801694-blog-123141645.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Ctr-2-131801694-blog-123141645.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=5">pycharm如何配置Anaconda虚拟环境_pycharm配置anaconda运行环境-CSDN博客</a></p><p>配置完成后可以先运行项目目录中的detect.py文件，再看yolov5-master\runs\detect中的运行结果</p><p>如果有结果则怎么环境配置成功</p><h2 id="6-制作数据集"><a href="#6-制作数据集" class="headerlink" title="6.制作数据集"></a>6.制作数据集</h2><p>先找数据集</p><p><a href="https://blog.csdn.net/luochao5862426/article/details/79564311?ops_request_misc=%7B%22request_id%22:%22172173859316800225532438%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=172173859316800225532438&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-79564311-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BD%91%E7%AB%99&amp;spm=1018.2226.3001.4187">史上最全数据集网站汇总-CSDN博客</a></p><p>下载标注工具labelimg，同时了解一些常见用法</p><p><a href="https://blog.csdn.net/qq_45688164/article/details/136070818?ops_request_misc=%7B%22request_id%22:%22172173866216800180650469%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=172173866216800180650469&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-136070818-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=pycharm%E4%B8%8B%E8%BD%BDlabelimg&amp;spm=1018.2226.3001.4187">labelimg 在pycharm下载使用_pycharm安装labelimg-CSDN博客</a></p><p>在yolov5的根目录下建一个文件夹 dataset，然后在dataset里建三个文件夹 images，imagesets， annotations，然后在imagesets里新建一个文件夹main。images文件夹是存放未识别的jpg文件（也就是我们用来训练模型的原始图片）</p><p>大概格式</p><p>yolov5(项目文件夹)</p><p>​——dataset</p><p>​——images(训练模型的原始照片)</p><p>​——imagesets</p><p>​——main</p><p>​——annotations（标注过的xml文件）</p><p>将需要标注的jpg图片放到上述images文件夹中，打开labelImg，用PascalVOC模式，Change Save Dir改为 annotations文件夹（上述创建的）</p><p>使用：</p><p>按w呼出矩形框用来标记，按d是下一张，按a是上一张，因为前面已经打开了自动保存，那么annotations里会自动保存了xml文件。</p><h2 id="7-增加三个文件"><a href="#7-增加三个文件" class="headerlink" title="7.增加三个文件"></a>7.增加三个文件</h2><h4 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h4><p>在dataset文件夹中创建py代码split_train_val.py：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"><span class="comment">#xml文件的地址，根据自己的数据进行修改 xml一般存放在annotations下</span></span><br><span class="line">parser.add_argument(<span class="string">'--xml_path'</span>, default=<span class="string">'annotations'</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">'input xml label path'</span>)</span><br><span class="line"><span class="comment">#数据集的划分，地址选择自己数据下的ImageSets/Main</span></span><br><span class="line">parser.add_argument(<span class="string">'--txt_path'</span>, default=<span class="string">'imagesets/main'</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">'output txt label path'</span>)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line">trainval_percent = <span class="number">1.0</span></span><br><span class="line">train_percent = <span class="number">0.9</span></span><br><span class="line">xmlfilepath = opt.xml_path</span><br><span class="line">txtsavepath = opt.txt_path</span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(txtsavepath):</span><br><span class="line">    os.makedirs(txtsavepath)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(total_xml)</span><br><span class="line">list_index = <span class="built_in">range</span>(num)</span><br><span class="line">tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">trainval = random.sample(list_index, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">file_trainval = <span class="built_in">open</span>(txtsavepath + <span class="string">'/trainval.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">file_test = <span class="built_in">open</span>(txtsavepath + <span class="string">'/test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">file_train = <span class="built_in">open</span>(txtsavepath + <span class="string">'/train.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">file_val = <span class="built_in">open</span>(txtsavepath + <span class="string">'/val.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_index:</span><br><span class="line">    name = total_xml[i][:-<span class="number">4</span>] + <span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        file_trainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            file_train.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_val.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_test.write(name)</span><br><span class="line"></span><br><span class="line">file_trainval.close()</span><br><span class="line">file_train.close()</span><br><span class="line">file_val.close()</span><br><span class="line">file_test.close()**运行**了上面这串代码之后，会在imagesets\main里生成四个文件</span><br><span class="line"></span><br><span class="line">分别为test.txt    train.txt     trainval.txtval.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h4><p>在dataset文件夹中新建py代码文件voc_label.py：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br><span class="line"></span><br><span class="line">sets = [<span class="string">'train'</span>, <span class="string">'val'</span>, <span class="string">'test'</span>]</span><br><span class="line">classes = [<span class="string">"bus"</span>]   <span class="comment"># 改成自己的类别，我只用于识别bus所以只有一个标签</span></span><br><span class="line">abs_path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(abs_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span> / (size[<span class="number">0</span>])</span><br><span class="line">    dh = <span class="number">1.</span> / (size[<span class="number">1</span>])</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> x, y, w, h</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">image_id</span>):</span><br><span class="line">    <span class="comment">#修改自己电脑上对应文件目录，infile是打开xml文件的</span></span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">'D:/develop-python/yolov5-6.0/dataset/annotations/%s.xml'</span> % (image_id), encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">'D:/develop-python/yolov5-6.0/dataset/labels/%s.txt'</span> % (image_id), <span class="string">'w'</span>)</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">'size'</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">'width'</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">'height'</span>).text)</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">'object'</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">'difficult'</span>)</span><br><span class="line">        <span class="keyword">if</span> difficult <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            difficult = <span class="built_in">int</span>(difficult.text)  <span class="comment"># 假设difficult是整数类型</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            difficult = <span class="number">0</span>  <span class="comment"># 或者你可以设置一个默认值，或者不处理difficult标签</span></span><br><span class="line">        cls = obj.find(<span class="string">'name'</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">'bndbox'</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">'xmin'</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">'xmax'</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">'ymin'</span>).text),</span><br><span class="line">             <span class="built_in">float</span>(xmlbox.find(<span class="string">'ymax'</span>).text))</span><br><span class="line">        b1, b2, b3, b4 = b</span><br><span class="line">        <span class="comment"># 标注越界修正</span></span><br><span class="line">        <span class="keyword">if</span> b2 &gt; w:</span><br><span class="line">            b2 = w</span><br><span class="line">        <span class="keyword">if</span> b4 &gt; h:</span><br><span class="line">            b4 = h</span><br><span class="line">        b = (b1, b2, b3, b4)</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">" "</span> + <span class="string">" "</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line"><span class="keyword">for</span> image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="comment">#修改为自己电脑上对应目录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'D:/develop-python/yolov5-6.0/dataset/labels/'</span>):</span><br><span class="line">        os.makedirs(<span class="string">'D:/develop-python/yolov5-6.0/dataset/labels/'</span>)</span><br><span class="line">    image_ids = <span class="built_in">open</span>(<span class="string">'D:/develop-python/yolov5-6.0/dataset/imagesets/main/%s.txt'</span> % (image_set)).read().strip().split()</span><br><span class="line">    list_file = <span class="built_in">open</span>(<span class="string">'D:/develop-python/yolov5-6.0/dataset/%s.txt'</span> % (image_set), <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(abs_path + <span class="string">'\images\%s.jpg\n'</span> % (image_id))</span><br><span class="line">        convert_annotation(image_id)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></tbody></table></figure><p><strong>注意修改代码中的目录</strong></p><p><strong>运行</strong>后dataset文件夹中会生成labels文件夹，以及三个txt文件：test.txt，train.txt，val.txt：</p><h4 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h4><p>然后在data文件夹中新建CustomData.yaml：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">train: D:\dev\yolov5-master\dataset\train.txt <span class="comment">#注意更改地址</span></span><br><span class="line">val: D:\dev\yolov5-master\dataset\val.txt <span class="comment">#注意更改地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># number of classes，有多少个标签就填多少个</span></span><br><span class="line"></span><br><span class="line">nc: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class names        我只有一个bus标签所以写bus</span></span><br><span class="line"></span><br><span class="line">names: </span><br><span class="line">  <span class="number">0</span>: 长袖</span><br><span class="line">  <span class="number">1</span>: 短袖</span><br><span class="line">  <span class="number">2</span>: OK</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="8-介绍并修改train-py"><a href="#8-介绍并修改train-py" class="headerlink" title="8.介绍并修改train.py"></a>8.介绍并修改train.py</h2><p><strong>train.py</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def parse_opt(known=False):</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument('--weights', type=str, default=ROOT / 'yolov5s.pt', help='initial weights path')</span><br><span class="line">    parser.add_argument('--cfg', type=str, default='models/yolov5s.yaml', help='model.yaml path')</span><br><span class="line">    parser.add_argument('--data', type=str, default=ROOT / 'data/CustomData.yaml', help='dataset.yaml path')</span><br><span class="line">    parser.add_argument('--hyp', type=str, default=ROOT / 'data/hyps/hyp.scratch.yaml', help='hyperparameters path')</span><br><span class="line">    parser.add_argument('--epochs', type=int, default=300)</span><br><span class="line">    parser.add_argument('--batch-size', type=int, default=16, help='total batch size for all GPUs')</span><br><span class="line">    parser.add_argument('--imgsz', '--img', '--img-size', type=int, default=640, help='train, val image size (pixels)')</span><br><span class="line">    parser.add_argument('--rect', action='store_true', help='rectangular training')</span><br><span class="line">    parser.add_argument('--resume', nargs='?', const=True, default=False, help='resume most recent training')</span><br><span class="line">    parser.add_argument('--nosave', action='store_true', help='only save final checkpoint')</span><br><span class="line">    parser.add_argument('--noval', action='store_true', help='only validate final epoch')</span><br><span class="line">    parser.add_argument('--noautoanchor', action='store_true', help='disable autoanchor check')</span><br><span class="line">    parser.add_argument('--evolve', type=int, nargs='?', const=300, help='evolve hyperparameters for x generations')</span><br><span class="line">    parser.add_argument('--bucket', type=str, default='', help='gsutil bucket')</span><br><span class="line">    parser.add_argument('--cache', type=str, nargs='?', const='ram', help='--cache images in "ram" (default) or "disk"')</span><br><span class="line">    parser.add_argument('--image-weights', action='store_true', help='use weighted image selection for training')</span><br><span class="line">    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')</span><br><span class="line">    parser.add_argument('--multi-scale', action='store_true', help='vary img-size +/- 50%%')</span><br><span class="line">    parser.add_argument('--single-cls', action='store_true', help='train multi-class data as single-class')</span><br><span class="line">    parser.add_argument('--adam', action='store_true', help='use torch.optim.Adam() optimizer')</span><br><span class="line">    parser.add_argument('--sync-bn', action='store_true', help='use SyncBatchNorm, only available in DDP mode')</span><br><span class="line">    parser.add_argument('--workers', type=int, default=8, help='maximum number of dataloader workers')</span><br><span class="line">    parser.add_argument('--project', default=ROOT / 'runs/train', help='save to project/name')</span><br><span class="line">    parser.add_argument('--name', default='exp', help='save to project/name')</span><br><span class="line">    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')</span><br><span class="line">    parser.add_argument('--quad', action='store_true', help='quad dataloader')</span><br><span class="line">    parser.add_argument('--linear-lr', action='store_true', help='linear LR')</span><br><span class="line">    parser.add_argument('--label-smoothing', type=float, default=0.0, help='Label smoothing epsilon')</span><br><span class="line">    parser.add_argument('--patience', type=int, default=100, help='EarlyStopping patience (epochs without improvement)')</span><br><span class="line">    parser.add_argument('--freeze', type=int, default=0, help='Number of layers to freeze. backbone=10, all=24')</span><br><span class="line">    parser.add_argument('--save-period', type=int, default=-1, help='Save checkpoint every x epochs (disabled if &lt; 1)')</span><br><span class="line">    parser.add_argument('--local_rank', type=int, default=-1, help='DDP parameter, do not modify')</span><br></pre></td></tr></tbody></table></figure><p>epochs：指的就是训练过程中整个数据集将被迭代多少次，默认是300次，次数越多模型越精准花的时间也越多</p><p>batch-size：一次看完多少张图片才进行权重更新，梯度下降的mini-batch。</p><p>cfg：存储模型结构的配置文件</p><p>data：存储训练、测试数据的文件</p><p>img-size：输入图片宽高。</p><p>rect：进行矩形训练</p><p>resume：恢复最近保存的模型开始训练</p><p>nosave：仅保存最终checkpoint</p><p>notest：仅测试最后的epoch</p><p>evolve：进化超参数</p><p>bucket：gsutil bucket</p><p>cache-images：缓存图像以加快训练速度</p><p>weights：权重文件路径</p><p>name： 重命名results.txt to results_name.txt</p><p>device：cuda device, i.e. 0 or 0,1,2,3 or cpu</p><p>adam：使用adam优化</p><p>multi-scale：多尺度训练，img-size +/- 50%</p><p>single-cls：单类别的训练集</p><p><strong>我们需要修改的是weight 、cfg 、data。weight用的是我们前面下载的yolov5s.pt的权重文件，cfg用的就是yolov5s.yaml，data则用的是我们前编写的CustomData.yaml</strong></p><h2 id="9-介绍detect-py"><a href="#9-介绍detect-py" class="headerlink" title="9.介绍detect.py"></a>9.介绍detect.py</h2><p><strong>detect.py</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def parse_opt():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument('--weights', nargs='+', type=str, default=ROOT /'yolov5s.pt' , help='model path(s)')</span><br><span class="line">    parser.add_argument('--source', type=str, default=ROOT / 'data/images', help='file/dir/URL/glob, 0 for webcam')</span><br><span class="line">    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[640], help='inference size h,w')</span><br><span class="line">    parser.add_argument('--conf-thres', type=float, default=0.25, help='confidence threshold')</span><br><span class="line">    parser.add_argument('--iou-thres', type=float, default=0.45, help='NMS IoU threshold')</span><br><span class="line">    parser.add_argument('--max-det', type=int, default=1000, help='maximum detections per image')</span><br><span class="line">    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')</span><br><span class="line">    parser.add_argument('--view-img', action='store_true', help='show results')</span><br><span class="line">    parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')</span><br><span class="line">    parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')</span><br><span class="line">    parser.add_argument('--save-crop', action='store_true', help='save cropped prediction boxes')</span><br><span class="line">    parser.add_argument('--nosave', action='store_true', help='do not save images/videos')</span><br><span class="line">    parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --classes 0, or --classes 0 2 3')</span><br><span class="line">    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')</span><br><span class="line">    parser.add_argument('--augment', action='store_true', help='augmented inference')</span><br><span class="line">    parser.add_argument('--visualize', action='store_true', help='visualize features')</span><br><span class="line">    parser.add_argument('--update', action='store_true', help='update all models')</span><br><span class="line">    parser.add_argument('--project', default=ROOT / 'runs/detect', help='save results to project/name')</span><br><span class="line">    parser.add_argument('--name', default='exp', help='save results to project/name')</span><br><span class="line">    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')</span><br><span class="line">    parser.add_argument('--line-thickness', default=3, type=int, help='bounding box thickness (pixels)')</span><br><span class="line">    parser.add_argument('--hide-labels', default=False, action='store_true', help='hide labels')</span><br><span class="line">    parser.add_argument('--hide-conf', default=False, action='store_true', help='hide confidences')</span><br><span class="line">    parser.add_argument('--half', action='store_true', help='use FP16 half-precision inference')</span><br><span class="line">    parser.add_argument('--dnn', action='store_true', help='use OpenCV DNN for ONNX inference')</span><br><span class="line">    opt = parser.parse_args()</span><br><span class="line">    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand</span><br><span class="line">    print_args(FILE.stem, opt)</span><br><span class="line">    return opt</span><br></pre></td></tr></tbody></table></figure><p>weights：训练的权重</p><p>source：测试数据，可以是图片/视频路径，也可以是’0’(电脑自带摄像头),也可以是rtsp等视频流</p><p>output：网络预测之后的图片/视频的保存路径</p><p>img-size：网络输入图片大小</p><p>conf-thres：置信度阈值</p><p>iou-thres：做nms的iou阈值</p><p>device：设置设备</p><p>view-img：是否展示预测之后的图片/视频，默认False</p><p>save-txt：是否将预测的框坐标以txt文件形式保存，默认False</p><p>classes：设置只保留某一部分类别，形如0或者0 2 3</p><p>agnostic-nms：进行nms是否也去除不同类别之间的框，默认False</p><p>augment：推理的时候进行多尺度，翻转等操作(TTA)推理</p><p>update：如果为True，则对所有模型进行strip_optimizer操作，去除pt文件中的优化器等信息，默认为False</p><p><strong>目前还不用修改这里的参数，后面训练完模型才修改权重文件。</strong></p><h2 id="10-训练模型"><a href="#10-训练模型" class="headerlink" title="10.训练模型"></a>10.训练模型</h2><p>运行train.py开始训练模型</p><p>当风扇开始嗡嗡转的时候就说明开始训练了</p><p>注意的是，训练的时候比较吃内存，别手贱打开那么多页面什么的</p><p>跑完之后，会在runs/train/exp/weights/下生成.pt文件，这个<strong>best.pt</strong>文件就是我们训练出来的权重文件</p><p>好了，然后再回去detect.py文件里，把<strong>权重文件换成我们自己训练的权重文件</strong></p><p>也就是weights这一行改成自己训练的权重文件的路径即可，把自己要检测的文件放到data/images里，然后运行detect.py即可开始识别所得结果会放在runs/detect文件夹内</p><p>大功告成！！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 经历 </category>
          
          <category> 计算机视觉 </category>
          
          <category> 环境配置 </category>
          
          <category> yolov </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> yolov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15届蓝桥杯</title>
      <link href="/2024/06/01/15-lan-qiao-bei/"/>
      <url>/2024/06/01/15-lan-qiao-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h2><p><strong>从刚开始报考的时候，觉着自己能拿个省一就心满意足了，当时认为拿个省一非常困难，毕竟在蓝桥杯a组，同台选手都比较厉害，但是到最后考试的时候，发现其实题目并不是特别的难，当然还有自己不会写的题，让我感到意外的是省赛的题对算法考察的并不是特别多，也就是如果对一些常见的题型比较熟悉，并且积累足够的代码量，基本就可以拿个省一，毕竟这个获奖比例确实挺高的😄😄。</strong><br><strong>考完省赛后，爽完了半个月，在五一期间还和同学一起去洛阳玩了4天，天天吃好吃的😄。</strong><br><strong>五月中旬花了一个星期的时间备考国赛，不过国赛题真难啊，尤其是第13届a组那一套题，看了半天就会写出来一道签到题，其他的都不会写，非常打击自信心。到了最后一个星期，我本打算再复习冲刺一波，于是我复习一遍之前做过的几套题，没想到写完一遍之后还是有很多题不会写。就这样破罐子破摔吧，我直接和室友狂打一个星期的永劫无间征神之路，我用的是岳山，战马刀伤害贼高，嘎嘎乱杀。最后国赛的时候，感觉写的还不错，会写的都写上了，部分题也能混几分，唯一遗憾的是到最后十分钟的时候发现有一道简单的15分的题被我忽略了，我一开始是写完第一道大题，看了半天第二道大题，就直接从后面开始写了，没想到最后隔了一道挺简单的一道题，好像是关于求满足一个公式的最大长度什么的，没时间码出来了😭。最后拿了个国优秀奖，还是挺满意的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经历 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
